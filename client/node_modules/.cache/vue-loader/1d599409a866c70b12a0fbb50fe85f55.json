{"remainingRequest":"/home/devcass/Courses/udemy-full-stack-vue-gql-cg/code/16 Deployment with Now/082 Deploying-Backend-Frontend-with-Now/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/devcass/Courses/udemy-full-stack-vue-gql-cg/code/16 Deployment with Now/082 Deploying-Backend-Frontend-with-Now/client/src/components/Posts/Post.vue?vue&type=style&index=0&id=03f949ac&scoped=true&lang=css&","dependencies":[{"path":"/home/devcass/Courses/udemy-full-stack-vue-gql-cg/code/16 Deployment with Now/082 Deploying-Backend-Frontend-with-Now/client/src/components/Posts/Post.vue","mtime":1534443024000},{"path":"/home/devcass/Courses/udemy-full-stack-vue-gql-cg/code/16 Deployment with Now/082 Deploying-Backend-Frontend-with-Now/client/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/home/devcass/Courses/udemy-full-stack-vue-gql-cg/code/16 Deployment with Now/082 Deploying-Backend-Frontend-with-Now/client/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/devcass/Courses/udemy-full-stack-vue-gql-cg/code/16 Deployment with Now/082 Deploying-Backend-Frontend-with-Now/client/node_modules/postcss-loader/lib/index.js","mtime":499162500000},{"path":"/home/devcass/Courses/udemy-full-stack-vue-gql-cg/code/16 Deployment with Now/082 Deploying-Backend-Frontend-with-Now/client/node_modules/cache-loader/dist/cjs.js","mtime":1595162080206},{"path":"/home/devcass/Courses/udemy-full-stack-vue-gql-cg/code/16 Deployment with Now/082 Deploying-Backend-Frontend-with-Now/client/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#post__image {\n  height: 400px !important;\n}\n",{"version":3,"sources":["Post.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyQA;AACA;AACA","file":"Post.vue","sourceRoot":"src/components/Posts","sourcesContent":["<template>\n  <v-container v-if=\"getPost\" class=\"mt-3\" flexbox center>\n\n    <!-- Post Card -->\n    <v-layout row wrap>\n      <v-flex xs12>\n        <v-card hover>\n          <v-card-title>\n            <h1>{{getPost.title}}</h1>\n            <v-btn @click=\"handleToggleLike\" large icon v-if=\"user\">\n              <v-icon large :color=\"checkIfPostLiked(getPost._id) ? 'red' : 'grey'\">favorite</v-icon>\n            </v-btn>\n            <h3 class=\"ml-3 font-weight-thin\">{{getPost.likes}} LIKES</h3>\n            <v-spacer></v-spacer>\n            <v-icon @click=\"goToPreviousPage\" color=\"info\" large>arrow_back</v-icon>\n          </v-card-title>\n\n          <v-tooltip right>\n            <span>Click to enlarge image</span>\n            <v-card-media @click=\"toggleImageDialog\" slot=\"activator\" :src=\"getPost.imageUrl\" id=\"post__image\"></v-card-media>\n          </v-tooltip>\n\n          <!-- Post Image Dialog -->\n          <v-dialog v-model=\"dialog\">\n            <v-card>\n              <v-card-media :src=\"getPost.imageUrl\" height=\"80vh\"></v-card-media>\n            </v-card>\n          </v-dialog>\n\n          <v-card-text>\n            <span v-for=\"(category, index) in getPost.categories\" :key=\"index\">\n              <v-chip class=\"mb-3\" color=\"accent\" text-color=\"white\">{{category}}</v-chip>\n            </span>\n            <h3>{{getPost.description}}</h3>\n          </v-card-text>\n        </v-card>\n      </v-flex>\n    </v-layout>\n\n    <!-- Messages Section -->\n    <div class=\"mt-3\">\n      <!-- Message Input -->\n      <v-layout class=\"mb-3\" v-if=\"user\">\n        <v-flex xs12>\n          <v-form v-model=\"isFormValid\" lazy-validation ref=\"form\" @submit.prevent=\"handleAddPostMessage\">\n            <v-layout row>\n              <v-flex xs12>\n                <v-text-field :rules=\"messageRules\" v-model=\"messageBody\" clearable :append-outer-icon=\"messageBody && 'send'\" label=\"Add Message\" type=\"text\" @click:append-outer=\"handleAddPostMessage\" prepend-icon=\"email\" required></v-text-field>\n              </v-flex>\n            </v-layout>\n          </v-form>\n        </v-flex>\n      </v-layout>\n\n      <!-- Messages -->\n      <v-layout row wrap>\n        <v-flex xs12>\n          <v-list subheader two-line>\n            <v-subheader>Messages ({{getPost.messages.length}})</v-subheader>\n\n            <template v-for=\"message in getPost.messages\">\n              <v-divider :key=\"message._id\"></v-divider>\n\n              <v-list-tile avatar inset :key=\"message.title\">\n                <v-list-tile-avatar>\n                  <img :src=\"message.messageUser.avatar\">\n                </v-list-tile-avatar>\n\n                <v-list-tile-content>\n                  <v-list-tile-title>\n                    {{message.messageBody}}\n                  </v-list-tile-title>\n                  <v-list-tile-sub-title>\n                    {{message.messageUser.username}}\n                    <span class=\"grey--text text--lighten-1 hidden-xs-only\">{{getTimeFromNow(message.messageDate)}}</span>\n                  </v-list-tile-sub-title>\n                </v-list-tile-content>\n\n                <v-list-tile-action class='hidden-xs-only'>\n                  <v-icon :color=\"checkIfOwnMessage(message) ? 'accent' : 'grey'\">chat_bubble</v-icon>\n                </v-list-tile-action>\n\n              </v-list-tile>\n            </template>\n          </v-list>\n        </v-flex>\n      </v-layout>\n\n    </div>\n\n  </v-container>\n</template>\n\n<script>\nimport moment from \"moment\";\nimport { mapGetters } from \"vuex\";\nimport {\n  GET_POST,\n  ADD_POST_MESSAGE,\n  LIKE_POST,\n  UNLIKE_POST\n} from \"../../queries\";\n\nexport default {\n  name: \"Post\",\n  props: [\"postId\"],\n  data() {\n    return {\n      postLiked: false,\n      dialog: false,\n      messageBody: \"\",\n      isFormValid: true,\n      messageRules: [\n        message => !!message || \"Message is required\",\n        message =>\n          message.length < 75 || \"Message must be less than 75 characters\"\n      ]\n    };\n  },\n  apollo: {\n    getPost: {\n      query: GET_POST,\n      variables() {\n        return {\n          postId: this.postId\n        };\n      }\n    }\n  },\n  computed: {\n    ...mapGetters([\"user\", \"userFavorites\"])\n  },\n  methods: {\n    getTimeFromNow(time) {\n      return moment(new Date(time)).fromNow();\n    },\n    checkIfPostLiked(postId) {\n      // check if user favorites includes post with id of 'postId'\n      if (\n        this.userFavorites &&\n        this.userFavorites.some(fave => fave._id === postId)\n      ) {\n        this.postLiked = true;\n        return true;\n      } else {\n        this.postLiked = false;\n        return false;\n      }\n    },\n    handleToggleLike() {\n      if (this.postLiked) {\n        this.handleUnlikePost();\n      } else {\n        this.handleLikePost();\n      }\n    },\n    handleLikePost() {\n      const variables = {\n        postId: this.postId,\n        username: this.user.username\n      };\n      this.$apollo\n        .mutate({\n          mutation: LIKE_POST,\n          variables,\n          update: (cache, { data: { likePost } }) => {\n            const data = cache.readQuery({\n              query: GET_POST,\n              variables: { postId: this.postId }\n            });\n            data.getPost.likes += 1;\n            cache.writeQuery({\n              query: GET_POST,\n              variables: { postId: this.postId },\n              data\n            });\n          }\n        })\n        .then(({ data }) => {\n          const updatedUser = {\n            ...this.user,\n            favorites: data.likePost.favorites\n          };\n          this.$store.commit(\"setUser\", updatedUser);\n        })\n        .catch(err => console.error(err));\n    },\n    handleUnlikePost() {\n      const variables = {\n        postId: this.postId,\n        username: this.user.username\n      };\n      this.$apollo\n        .mutate({\n          mutation: UNLIKE_POST,\n          variables,\n          update: (cache, { data: { unlikePost } }) => {\n            const data = cache.readQuery({\n              query: GET_POST,\n              variables: { postId: this.postId }\n            });\n            data.getPost.likes -= 1;\n            cache.writeQuery({\n              query: GET_POST,\n              variables: { postId: this.postId },\n              data\n            });\n          }\n        })\n        .then(({ data }) => {\n          const updatedUser = {\n            ...this.user,\n            favorites: data.unlikePost.favorites\n          };\n          this.$store.commit(\"setUser\", updatedUser);\n        })\n        .catch(err => console.error(err));\n    },\n    handleAddPostMessage() {\n      if (this.$refs.form.validate()) {\n        const variables = {\n          messageBody: this.messageBody,\n          userId: this.user._id,\n          postId: this.postId\n        };\n        this.$apollo\n          .mutate({\n            mutation: ADD_POST_MESSAGE,\n            variables,\n            update: (cache, { data: { addPostMessage } }) => {\n              const data = cache.readQuery({\n                query: GET_POST,\n                variables: { postId: this.postId }\n              });\n              data.getPost.messages.unshift(addPostMessage);\n              cache.writeQuery({\n                query: GET_POST,\n                variables: { postId: this.postId },\n                data\n              });\n            }\n          })\n          .then(({ data }) => {\n            this.$refs.form.reset();\n            console.log(data.addPostMessage);\n          })\n          .catch(err => console.error(err));\n      }\n    },\n    goToPreviousPage() {\n      this.$router.go(-1);\n    },\n    toggleImageDialog() {\n      if (window.innerWidth > 500) {\n        this.dialog = !this.dialog;\n      }\n    },\n    checkIfOwnMessage(message) {\n      return this.user && this.user._id === message.messageUser._id;\n    }\n  }\n};\n</script>\n\n<style scoped>\n#post__image {\n  height: 400px !important;\n}\n</style>\n"]}]}
{"remainingRequest":"/home/devcass/Courses/udemy-full-stack-vue-gql-cg/code/16 Deployment with Now/082 Deploying-Backend-Frontend-with-Now/client/node_modules/babel-loader/lib/index.js!/home/devcass/Courses/udemy-full-stack-vue-gql-cg/code/16 Deployment with Now/082 Deploying-Backend-Frontend-with-Now/client/src/store.js","dependencies":[{"path":"/home/devcass/Courses/udemy-full-stack-vue-gql-cg/code/16 Deployment with Now/082 Deploying-Backend-Frontend-with-Now/client/src/store.js","mtime":1534441736000},{"path":"/home/devcass/Courses/udemy-full-stack-vue-gql-cg/code/16 Deployment with Now/082 Deploying-Backend-Frontend-with-Now/client/node_modules/cache-loader/dist/cjs.js","mtime":1595162080206},{"path":"/home/devcass/Courses/udemy-full-stack-vue-gql-cg/code/16 Deployment with Now/082 Deploying-Backend-Frontend-with-Now/client/node_modules/babel-loader/lib/index.js","mtime":1529635966000}],"contextDependencies":[],"result":["import _regeneratorRuntime from \"/home/devcass/Courses/udemy-full-stack-vue-gql-cg/code/16 Deployment with Now/082 Deploying-Backend-Frontend-with-Now/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/devcass/Courses/udemy-full-stack-vue-gql-cg/code/16 Deployment with Now/082 Deploying-Backend-Frontend-with-Now/client/node_modules/@babel/runtime/helpers/builtin/es6/asyncToGenerator\";\nimport _toConsumableArray from \"/home/devcass/Courses/udemy-full-stack-vue-gql-cg/code/16 Deployment with Now/082 Deploying-Backend-Frontend-with-Now/client/node_modules/@babel/runtime/helpers/builtin/es6/toConsumableArray\";\nimport _objectSpread from \"/home/devcass/Courses/udemy-full-stack-vue-gql-cg/code/16 Deployment with Now/082 Deploying-Backend-Frontend-with-Now/client/node_modules/@babel/runtime/helpers/builtin/es6/objectSpread\";\nimport Vue from \"vue\";\nimport Vuex from \"vuex\";\nimport router from \"./router\";\nimport { defaultClient as apolloClient } from \"./main\";\nimport { GET_CURRENT_USER, GET_POSTS, INFINITE_SCROLL_POSTS, GET_USER_POSTS, SEARCH_POSTS, ADD_POST, UPDATE_USER_POST, DELETE_USER_POST, SIGNIN_USER, SIGNUP_USER } from \"./queries\";\nVue.use(Vuex);\nexport default new Vuex.Store({\n  state: {\n    posts: [],\n    userPosts: [],\n    searchResults: [],\n    user: null,\n    loading: false,\n    error: null,\n    authError: null\n  },\n  mutations: {\n    setPosts: function setPosts(state, payload) {\n      state.posts = payload;\n    },\n    setSearchResults: function setSearchResults(state, payload) {\n      if (payload !== null) {\n        state.searchResults = payload;\n      }\n    },\n    setUser: function setUser(state, payload) {\n      state.user = payload;\n    },\n    setUserPosts: function setUserPosts(state, payload) {\n      state.userPosts = payload;\n    },\n    setLoading: function setLoading(state, payload) {\n      state.loading = payload;\n    },\n    setError: function setError(state, payload) {\n      state.error = payload;\n    },\n    setAuthError: function setAuthError(state, payload) {\n      state.authError = payload;\n    },\n    clearUser: function clearUser(state) {\n      return state.user = null;\n    },\n    clearSearchResults: function clearSearchResults(state) {\n      return state.searchResults = [];\n    },\n    clearError: function clearError(state) {\n      return state.error = null;\n    }\n  },\n  actions: {\n    getCurrentUser: function getCurrentUser(_ref) {\n      var commit = _ref.commit;\n      commit(\"setLoading\", true);\n      apolloClient.query({\n        query: GET_CURRENT_USER\n      }).then(function (_ref2) {\n        var data = _ref2.data;\n        commit(\"setLoading\", false); // Add user data to state\n\n        commit(\"setUser\", data.getCurrentUser);\n        console.log(data.getCurrentUser);\n      }).catch(function (err) {\n        commit(\"setLoading\", false);\n        console.error(err);\n      });\n    },\n    getPosts: function getPosts(_ref3) {\n      var commit = _ref3.commit;\n      commit(\"setLoading\", true);\n      apolloClient.query({\n        query: GET_POSTS\n      }).then(function (_ref4) {\n        var data = _ref4.data;\n        commit(\"setPosts\", data.getPosts);\n        commit(\"setLoading\", false);\n      }).catch(function (err) {\n        commit(\"setLoading\", false);\n        console.error(err);\n      });\n    },\n    getUserPosts: function getUserPosts(_ref5, payload) {\n      var commit = _ref5.commit;\n      apolloClient.query({\n        query: GET_USER_POSTS,\n        variables: payload\n      }).then(function (_ref6) {\n        var data = _ref6.data;\n        commit(\"setUserPosts\", data.getUserPosts); // console.log(data.getUserPosts);\n      }).catch(function (err) {\n        console.error(err);\n      });\n    },\n    searchPosts: function searchPosts(_ref7, payload) {\n      var commit = _ref7.commit;\n      apolloClient.query({\n        query: SEARCH_POSTS,\n        variables: payload\n      }).then(function (_ref8) {\n        var data = _ref8.data;\n        commit(\"setSearchResults\", data.searchPosts);\n      }).catch(function (err) {\n        return console.error(err);\n      });\n    },\n    addPost: function addPost(_ref9, payload) {\n      var commit = _ref9.commit;\n      apolloClient.mutate({\n        mutation: ADD_POST,\n        variables: payload,\n        update: function update(cache, _ref10) {\n          var addPost = _ref10.data.addPost;\n          // First read the query you want to update\n          var data = cache.readQuery({\n            query: GET_POSTS\n          }); // Create updated data\n\n          data.getPosts.unshift(addPost); // Write updated data back to query\n\n          console.log(data);\n          cache.writeQuery({\n            query: GET_POSTS,\n            data: data\n          });\n        },\n        // optimistic response ensures data is added immediately as we specified for the update function\n        optimisticResponse: {\n          __typename: \"Mutation\",\n          addPost: _objectSpread({\n            __typename: \"Post\",\n            _id: -1\n          }, payload)\n        },\n        // Rerun specified queries after performing the mutation in order to get fresh data\n        refetchQueries: [{\n          query: INFINITE_SCROLL_POSTS,\n          variables: {\n            pageNum: 1,\n            pageSize: 2\n          }\n        }]\n      }).then(function (_ref11) {\n        var data = _ref11.data;\n        console.log(data.addPost);\n      }).catch(function (err) {\n        console.error(err);\n      });\n    },\n    updateUserPost: function updateUserPost(_ref12, payload) {\n      var state = _ref12.state,\n          commit = _ref12.commit;\n      apolloClient.mutate({\n        mutation: UPDATE_USER_POST,\n        variables: payload\n      }).then(function (_ref13) {\n        var data = _ref13.data;\n        var index = state.userPosts.findIndex(function (post) {\n          return post._id === data.updateUserPost._id;\n        });\n\n        var userPosts = _toConsumableArray(state.userPosts.slice(0, index)).concat([data.updateUserPost], _toConsumableArray(state.userPosts.slice(index + 1)));\n\n        commit(\"setUserPosts\", userPosts);\n      }).catch(function (err) {\n        console.error(err);\n      });\n    },\n    deleteUserPost: function deleteUserPost(_ref14, payload) {\n      var state = _ref14.state,\n          commit = _ref14.commit;\n      apolloClient.mutate({\n        mutation: DELETE_USER_POST,\n        variables: payload\n      }).then(function (_ref15) {\n        var data = _ref15.data;\n        var index = state.userPosts.findIndex(function (post) {\n          return post._id === data.deleteUserPost._id;\n        });\n\n        var userPosts = _toConsumableArray(state.userPosts.slice(0, index)).concat(_toConsumableArray(state.userPosts.slice(index + 1)));\n\n        commit(\"setUserPosts\", userPosts);\n      }).catch(function (err) {\n        console.error(err);\n      });\n    },\n    signinUser: function signinUser(_ref16, payload) {\n      var commit = _ref16.commit;\n      commit(\"clearError\");\n      commit(\"setLoading\", true);\n      apolloClient.mutate({\n        mutation: SIGNIN_USER,\n        variables: payload\n      }).then(function (_ref17) {\n        var data = _ref17.data;\n        commit(\"setLoading\", false);\n        localStorage.setItem(\"token\", data.signinUser.token); // to make sure created method is run in main.js (we run getCurrentUser), reload the page\n\n        router.go();\n      }).catch(function (err) {\n        commit(\"setLoading\", false);\n        commit(\"setError\", err);\n        console.error(err);\n      });\n    },\n    signupUser: function signupUser(_ref18, payload) {\n      var commit = _ref18.commit;\n      commit(\"clearError\");\n      commit(\"setLoading\", true);\n      apolloClient.mutate({\n        mutation: SIGNUP_USER,\n        variables: payload\n      }).then(function (_ref19) {\n        var data = _ref19.data;\n        commit(\"setLoading\", false);\n        localStorage.setItem(\"token\", data.signupUser.token); // to make sure created method is run in main.js (we run getCurrentUser), reload the page\n\n        router.go();\n      }).catch(function (err) {\n        commit(\"setLoading\", false);\n        commit(\"setError\", err);\n        console.error(err);\n      });\n    },\n    signoutUser: function () {\n      var _signoutUser = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(_ref20) {\n        var commit;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                commit = _ref20.commit;\n                // clear user in state\n                commit(\"clearUser\"); // remove token in localStorage\n\n                localStorage.setItem(\"token\", \"\"); // end session\n\n                _context.next = 5;\n                return apolloClient.resetStore();\n\n              case 5:\n                // redirect home - kick users out of private pages (i.e. profile)\n                router.push(\"/\");\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function signoutUser(_x) {\n        return _signoutUser.apply(this, arguments);\n      };\n    }()\n  },\n  getters: {\n    posts: function posts(state) {\n      return state.posts;\n    },\n    userPosts: function userPosts(state) {\n      return state.userPosts;\n    },\n    searchResults: function searchResults(state) {\n      return state.searchResults;\n    },\n    user: function user(state) {\n      return state.user;\n    },\n    userFavorites: function userFavorites(state) {\n      return state.user && state.user.favorites;\n    },\n    loading: function loading(state) {\n      return state.loading;\n    },\n    error: function error(state) {\n      return state.error;\n    },\n    authError: function authError(state) {\n      return state.authError;\n    }\n  }\n});",{"version":3,"sources":["src/store.js"],"names":["Vue","Vuex","router","defaultClient","apolloClient","GET_CURRENT_USER","GET_POSTS","INFINITE_SCROLL_POSTS","GET_USER_POSTS","SEARCH_POSTS","ADD_POST","UPDATE_USER_POST","DELETE_USER_POST","SIGNIN_USER","SIGNUP_USER","use","Store","state","posts","userPosts","searchResults","user","loading","error","authError","mutations","setPosts","payload","setSearchResults","setUser","setUserPosts","setLoading","setError","setAuthError","clearUser","clearSearchResults","clearError","actions","getCurrentUser","commit","query","then","data","console","log","catch","err","getPosts","getUserPosts","variables","searchPosts","addPost","mutate","mutation","update","cache","readQuery","unshift","writeQuery","optimisticResponse","__typename","_id","refetchQueries","pageNum","pageSize","updateUserPost","index","findIndex","post","slice","deleteUserPost","signinUser","localStorage","setItem","token","go","signupUser","signoutUser","resetStore","push","getters","userFavorites","favorites"],"mappings":"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","sourceRoot":"/home/devcass/Courses/udemy-full-stack-vue-gql-cg/code/16 Deployment with Now/082 Deploying-Backend-Frontend-with-Now/client","sourcesContent":["import Vue from \"vue\";\nimport Vuex from \"vuex\";\nimport router from \"./router\";\n\nimport { defaultClient as apolloClient } from \"./main\";\n\nimport {\n  GET_CURRENT_USER,\n  GET_POSTS,\n  INFINITE_SCROLL_POSTS,\n  GET_USER_POSTS,\n  SEARCH_POSTS,\n  ADD_POST,\n  UPDATE_USER_POST,\n  DELETE_USER_POST,\n  SIGNIN_USER,\n  SIGNUP_USER\n} from \"./queries\";\n\nVue.use(Vuex);\n\nexport default new Vuex.Store({\n  state: {\n    posts: [],\n    userPosts: [],\n    searchResults: [],\n    user: null,\n    loading: false,\n    error: null,\n    authError: null\n  },\n  mutations: {\n    setPosts: (state, payload) => {\n      state.posts = payload;\n    },\n    setSearchResults: (state, payload) => {\n      if (payload !== null) {\n        state.searchResults = payload;\n      }\n    },\n    setUser: (state, payload) => {\n      state.user = payload;\n    },\n    setUserPosts: (state, payload) => {\n      state.userPosts = payload;\n    },\n    setLoading: (state, payload) => {\n      state.loading = payload;\n    },\n    setError: (state, payload) => {\n      state.error = payload;\n    },\n    setAuthError: (state, payload) => {\n      state.authError = payload;\n    },\n    clearUser: state => (state.user = null),\n    clearSearchResults: state => (state.searchResults = []),\n    clearError: state => (state.error = null)\n  },\n  actions: {\n    getCurrentUser: ({ commit }) => {\n      commit(\"setLoading\", true);\n      apolloClient\n        .query({\n          query: GET_CURRENT_USER\n        })\n        .then(({ data }) => {\n          commit(\"setLoading\", false);\n          // Add user data to state\n          commit(\"setUser\", data.getCurrentUser);\n          console.log(data.getCurrentUser);\n        })\n        .catch(err => {\n          commit(\"setLoading\", false);\n          console.error(err);\n        });\n    },\n    getPosts: ({ commit }) => {\n      commit(\"setLoading\", true);\n      apolloClient\n        .query({\n          query: GET_POSTS\n        })\n        .then(({ data }) => {\n          commit(\"setPosts\", data.getPosts);\n          commit(\"setLoading\", false);\n        })\n        .catch(err => {\n          commit(\"setLoading\", false);\n          console.error(err);\n        });\n    },\n    getUserPosts: ({ commit }, payload) => {\n      apolloClient\n        .query({\n          query: GET_USER_POSTS,\n          variables: payload\n        })\n        .then(({ data }) => {\n          commit(\"setUserPosts\", data.getUserPosts);\n          // console.log(data.getUserPosts);\n        })\n        .catch(err => {\n          console.error(err);\n        });\n    },\n    searchPosts: ({ commit }, payload) => {\n      apolloClient\n        .query({\n          query: SEARCH_POSTS,\n          variables: payload\n        })\n        .then(({ data }) => {\n          commit(\"setSearchResults\", data.searchPosts);\n        })\n        .catch(err => console.error(err));\n    },\n    addPost: ({ commit }, payload) => {\n      apolloClient\n        .mutate({\n          mutation: ADD_POST,\n          variables: payload,\n          update: (cache, { data: { addPost } }) => {\n            // First read the query you want to update\n            const data = cache.readQuery({ query: GET_POSTS });\n            // Create updated data\n            data.getPosts.unshift(addPost);\n            // Write updated data back to query\n            console.log(data);\n            cache.writeQuery({\n              query: GET_POSTS,\n              data\n            });\n          },\n          // optimistic response ensures data is added immediately as we specified for the update function\n          optimisticResponse: {\n            __typename: \"Mutation\",\n            addPost: {\n              __typename: \"Post\",\n              _id: -1,\n              ...payload\n            }\n          },\n          // Rerun specified queries after performing the mutation in order to get fresh data\n          refetchQueries: [\n            {\n              query: INFINITE_SCROLL_POSTS,\n              variables: {\n                pageNum: 1,\n                pageSize: 2\n              }\n            }\n          ]\n        })\n        .then(({ data }) => {\n          console.log(data.addPost);\n        })\n        .catch(err => {\n          console.error(err);\n        });\n    },\n    updateUserPost: ({ state, commit }, payload) => {\n      apolloClient\n        .mutate({\n          mutation: UPDATE_USER_POST,\n          variables: payload\n        })\n        .then(({ data }) => {\n          const index = state.userPosts.findIndex(\n            post => post._id === data.updateUserPost._id\n          );\n          const userPosts = [\n            ...state.userPosts.slice(0, index),\n            data.updateUserPost,\n            ...state.userPosts.slice(index + 1)\n          ];\n          commit(\"setUserPosts\", userPosts);\n        })\n        .catch(err => {\n          console.error(err);\n        });\n    },\n    deleteUserPost: ({ state, commit }, payload) => {\n      apolloClient\n        .mutate({\n          mutation: DELETE_USER_POST,\n          variables: payload\n        })\n        .then(({ data }) => {\n          const index = state.userPosts.findIndex(\n            post => post._id === data.deleteUserPost._id\n          );\n          const userPosts = [\n            ...state.userPosts.slice(0, index),\n            ...state.userPosts.slice(index + 1)\n          ];\n          commit(\"setUserPosts\", userPosts);\n        })\n        .catch(err => {\n          console.error(err);\n        });\n    },\n    signinUser: ({ commit }, payload) => {\n      commit(\"clearError\");\n      commit(\"setLoading\", true);\n      apolloClient\n        .mutate({\n          mutation: SIGNIN_USER,\n          variables: payload\n        })\n        .then(({ data }) => {\n          commit(\"setLoading\", false);\n          localStorage.setItem(\"token\", data.signinUser.token);\n          // to make sure created method is run in main.js (we run getCurrentUser), reload the page\n          router.go();\n        })\n        .catch(err => {\n          commit(\"setLoading\", false);\n          commit(\"setError\", err);\n          console.error(err);\n        });\n    },\n    signupUser: ({ commit }, payload) => {\n      commit(\"clearError\");\n      commit(\"setLoading\", true);\n      apolloClient\n        .mutate({\n          mutation: SIGNUP_USER,\n          variables: payload\n        })\n        .then(({ data }) => {\n          commit(\"setLoading\", false);\n          localStorage.setItem(\"token\", data.signupUser.token);\n          // to make sure created method is run in main.js (we run getCurrentUser), reload the page\n          router.go();\n        })\n        .catch(err => {\n          commit(\"setLoading\", false);\n          commit(\"setError\", err);\n          console.error(err);\n        });\n    },\n    signoutUser: async ({ commit }) => {\n      // clear user in state\n      commit(\"clearUser\");\n      // remove token in localStorage\n      localStorage.setItem(\"token\", \"\");\n      // end session\n      await apolloClient.resetStore();\n      // redirect home - kick users out of private pages (i.e. profile)\n      router.push(\"/\");\n    }\n  },\n  getters: {\n    posts: state => state.posts,\n    userPosts: state => state.userPosts,\n    searchResults: state => state.searchResults,\n    user: state => state.user,\n    userFavorites: state => state.user && state.user.favorites,\n    loading: state => state.loading,\n    error: state => state.error,\n    authError: state => state.authError\n  }\n});\n"]}]}